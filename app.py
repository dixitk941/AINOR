import os
import requests
from flask import Flask, render_template, request, jsonify, redirect, url_for, session
import logging

app = Flask(__name__)
app.secret_key = os.urandom(24)  # For session management

# Initialize a list to store all responses (only in memory)
all_responses = []

# Gemini API setup with environment variable
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
# GEMINI_API_KEY = "xxxaSyARdoeSSu7JuVwvBRzy-ORO8hm5PW4-0lU"
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent"

def call_gemini_api(prompt):
    headers = {
        "Content-Type": "application/json"
    }
    
    # Improve prompt to encourage code formatting with proper markdown
    if any(keyword in prompt.lower() for keyword in ["code", "function", "program", "script", "write"]):
        prompt = f"{prompt}\n\nPlease format any code with proper markdown code blocks using triple backticks."
    
    data = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {
            "temperature": 0.7,
            "topK": 40,
            "topP": 0.95,
            "maxOutputTokens": 8192,
        }
    }

    if GEMINI_API_KEY is None:
        return "API key is not set."

    # Send the API request
    response = requests.post(
        f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",
        headers=headers,
        json=data
    )

    if response.ok:
        try:
            # Inspect response JSON structure
            response_json = response.json()
            
            # Log the whole response for debugging
            logging.info(f"Gemini API raw response: {response_json}")
            
            # Extract the text response
            candidates = response_json.get("candidates", [])
            if not candidates:
                return "No response generated by AI."
                
            content = candidates[0].get("content", {})
            parts = content.get("parts", [])
            
            if not parts:
                return "Empty response from AI."
                
            gemini_response = parts[0].get("text", "").strip()
            
            if not gemini_response:
                return "The AI returned an empty response. Please try again."
            
            # Log the response (only in memory)
            log_response(prompt, gemini_response)
            
            return gemini_response
        except Exception as e:
            logging.error(f"Error processing Gemini API response: {str(e)}")
            logging.error(f"Response data: {response.text}")
            return f"Error processing AI response: {str(e)}"
    else:
        logging.error(f"Gemini API error: {response.status_code} {response.text}")
        return "I'm having trouble connecting to the Gemini API."

# Function to log responses (only in memory)
def log_response(prompt, response_text):
    response_data = {"prompt": prompt, "response": response_text}
    all_responses.append(response_data)

@app.route('/')
def index():
    return render_template('index.html')

# Add login route
@app.route('/login')
def login():
    return render_template('Login.html')

# Add this route to handle direct requests to /Login.html
@app.route('/Login.html')
def login_html():
    return redirect(url_for('login'))

# Optional: add logout route
@app.route('/logout')
def logout():
    return redirect(url_for('login'))

@app.route('/process_command', methods=['POST'])
def process_command():
    command = request.json.get('command', '').lower()
    
    # List of possible questions related to the creator, founder, and developer
    if command in [
        "who is your creator", 
        "who is your founder", 
        "who is your developer", 
        "tell me about your creator",
        "tell me about your founder",
        "who created you",
        "who developed you",
        "who made you",
        "who is responsible for your creation",
        "who is behind your development",
        "who designed you",
        "what team created you",
        "who built you",
        "who established you",
        "can you tell me your creator",
        "can you tell me about your developers",
        "who are your creators",
        "who is the team behind you",
        "who is your parent company",
        "who is your maker",
        "who is your architect",
        "who is your originator"
    ]:
        response = "I was created by NeoCodeNex, Karan Dixit, and the talented Team Google."
    elif command in [
        "what is your name", 
        "tell me your name", 
        "who are you", 
        "what's your full name",
        "do you have a name",
        "can you tell me your name",
        "what should I call you",
        "who am i talking to",
        "are you ainor",
        "your name"
    ]:
        response = "My name is AINOR, which stands for Artificial Intelligence Natural Optimization Resource."
    else:
        response = call_gemini_api(command)
    
    return jsonify({'response': response})

# Only needed for local development
if __name__ == '__main__':
    app.run(debug=True)